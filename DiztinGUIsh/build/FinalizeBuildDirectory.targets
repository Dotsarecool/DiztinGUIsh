<?xml version="1.0" encoding="utf-8"?>

<!-- 
DiztinGUIsh

The point of this file is, for release builds, to re-arrange the file structure of bin/Release/ to be ready for 
end-user distribution. That mostly means moving the big mess of DLLs into a lib/ file, and copying around some docs
and support files.

We could have done this more easily with a .bat file or similar, but, I wanted the configuration to be testable in 
visual studio so we can diagnose issues that result from this file structure more easily. 

vague gist of this is here:
https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-extend-the-visual-studio-build-process?view=vs-2019 
-->

<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <FinalReleaseLibDir>$(OutDir)lib\</FinalReleaseLibDir>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <BuildDependsOn>
      $(BuildDependsOn);
      CreateFinalDistributionDirectory;
      RemoveEmptyDirs;
    </BuildDependsOn>
    <CleanDependsOn>
      $(CleanDependsOn);
      CustomClean;
    </CleanDependsOn>
  </PropertyGroup>

  <!-- only add static files here, if anything is auto-generating, don't put it here -->
  <ItemGroup>
    <FinalReleaseSupportFiles Include="dist\**\*.*" />
    <FinalReleaseSupportFiles Include="..\README.md" />
    <FinalReleaseSupportFiles Include="..\LICENSE.md" />
  </ItemGroup>

  <!-- 
    for final release, move some files around to make the distribution distro look nicer
    I wanted to do this here (instead of in external CI) so this configuration could be tested and debugged 
    -->
  <Target Name="CreateFinalDistributionDirectory">
    <ItemGroup>
      <!-- add autogenerated files here -->
      <FinalReleaseLibFiles Include="$(OutDir)**\*.dll" />
      <FinalReleaseLibFiles Include="$(OutDir)**\*.xml" />
      <FinalReleaseLibFiles Include="$(OutDir)**\*.pdb" />
      <FinalReleaseLibFiles Include="$(OutDir)**\*.config" />

      <FinalReleaseLibFiles Remove="$(FinalReleaseLibDir)\**\*.*" />
      <FinalReleaseLibFiles Remove="$(OutDir)$(ProjectName)*" />
      <FinalReleaseLibFiles Remove="$(OutDir)$(ProjectName).exe" />
    </ItemGroup>

    <Error Condition="'$(OutDir)' == ''" Text="OutDir variable not set, can't continue." />

    <Move SourceFiles="%(FinalReleaseLibFiles.Identity)"
          DestinationFolder="$(FinalReleaseLibDir)%(FinalReleaseLibFiles.RecursiveDir)" />
    <Copy SourceFiles="%(FinalReleaseSupportFiles.Identity)"
          DestinationFolder="$(OutDir)%(FinalReleaseSupportFiles.RecursiveDir)"
          SkipUnchangedFiles="true" />
  </Target>

  <Target Name="RemoveEmptyDirs">
    <ItemGroup>
      <Directories
        Include="$([System.IO.Directory]::GetDirectories('$(OutDir)', '*', System.IO.SearchOption.AllDirectories))" />
      <Directories>
        <Files>$([System.IO.Directory]::GetFiles("%(Directories.Identity)", "*", System.IO.SearchOption.AllDirectories).get_Length())</Files>
      </Directories>
    </ItemGroup>
    <RemoveDir Directories="@(Directories)" Condition="%(Files)=='0'" />
  </Target>

  <Target Name="CustomClean">
    <Error Condition="'$(OutDir)' == ''" Text="OutDir variable not set, can't continue." />
    <ItemGroup>
      <_CustomFilesToDelete Include="$(FinalReleaseLibDir)**\*" />
      <_CustomFilesToDelete
        Include="$(OutDir)%(FinalReleaseSupportFiles.RecursiveDir)%(FinalReleaseSupportFiles.Filename)%(FinalReleaseSupportFiles.Extension)" />
    </ItemGroup>
    <Delete Files='@(_CustomFilesToDelete)' />

    <!-- TODO: figure out how to refactor this, it's the same code as above.
             reason is: If you do a REBUILD, RemoveEmptyDirs will only get called once (for the early clean) and not at the end a second time -->
    <ItemGroup>
      <Directories
        Include="$([System.IO.Directory]::GetDirectories('$(OutDir)', '*', System.IO.SearchOption.AllDirectories))" />
      <Directories>
        <Files>$([System.IO.Directory]::GetFiles("%(Directories.Identity)", "*", System.IO.SearchOption.AllDirectories).get_Length())</Files>
      </Directories>
    </ItemGroup>
    <RemoveDir Directories="@(Directories)" Condition="%(Files)=='0'" />
    <!-- end same code -->

  </Target>
</Project>